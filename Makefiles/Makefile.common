# This makefile is common for both Makefile.lib and Makefile.src
TOOLBASE ?= 
COMPILE_ANY_CHANGE ?= 
SRCONLY ?= 
HDRONLY ?= 

MAKEFILES_PATH := $(dir $(lastword $(MAKEFILE_LIST)))
include $(MAKEFILES_PATH)Makefile.include

MAKE_DEPENDS=Makefile.depends

# Source File Set
TOOLHDR = $(TOOLBASE:=.h) $(HDRONLY)
TOOLSRC = $(TOOLBASE:=.cpp) $(SRCONLY)
TOOLOBJ = $(TOOLSRC:.cpp=.o)

# Define the directory structure for opt/debug/profile for objs & bins
SUBDIR_OPT ?= 
SUBDIR_DEBUG ?= /debug
SUBDIR_PROFILE ?= /profile

#Objs default to the obj directory.
OBJDIR ?= ../obj
OBJDIR_OPT ?= $(OBJDIR)$(SUBDIR_OPT)
OBJDIR_DEBUG ?= $(OBJDIR)$(SUBDIR_DEBUG)
OBJDIR_PROFILE ?= $(OBJDIR)$(SUBDIR_PROFILE)

#Needed for cleaning up the library - need all three.
OBJECTS_OPT = $(patsubst %,$(OBJDIR_OPT)/%,$(TOOLOBJ))
OBJECTS_DEBUG = $(patsubst %,$(OBJDIR_DEBUG)/%,$(TOOLOBJ))
OBJECTS_PROFILE = $(patsubst %,$(OBJDIR_PROFILE)/%,$(TOOLOBJ))

# Tests go in the test directory.
TESTDIR ?= test

ifeq ($(MAKECMDGOALS), debug)
  VARIABLE_EXT=_DEBUG
  OPTFLAG = $(OPTFLAG_DEBUG)
else ifeq ($(MAKECMDGOALS), profile)
  VARIABLE_EXT=_PROFILE
  OPTFLAG = $(OPTFLAG_PROFILE)
else
  VARIABLE_EXT=_OPT
  OPTFLAG ?= $(OPTFLAG_OPT)
endif

OBJECTS=$(OBJECTS$(VARIABLE_EXT))
ALWAYS_COMP_OBJ = $(patsubst %,$(OBJDIR$(VARIABLE_EXT))/%,$(COMPILE_ANY_CHANGE:=.o))'

OPTFLAG ?= $(OPTFLAG$(VARIABLE_EXT))

.PHONY: all test clean debug profile specific_clean

# all, build as opt, debug, and profile.
all: 
	@$(MAKE) OPTFLAG="$(OPTFLAG)" --no-print-directory opt
	@$(MAKE) OPTFLAG_DEBUG="$(OPTFLAG_DEBUG)" --no-print-directory debug
	@$(MAKE) OPTFLAG_PROFILE="$(OPTFLAG_PROFILE)" --no-print-directory profile

#########
# Help
include $(MAKEFILES_PATH)Makefile.help

#######
# Objects
# The objects are dependent on the object directory.
$(OBJECTS): | $(OBJDIR$(VARIABLE_EXT))

# Create the object directory
$(OBJDIR$(VARIABLE_EXT)):
	mkdir -p $@

# Compile the source
$(OBJDIR$(VARIABLE_EXT))/%.o: %.c
	$(CC) $(CFLAGS) -o $@ -c $*.c 

$(OBJDIR$(VARIABLE_EXT))/%.o: %.cpp 
	$(CXX) $(CFLAGS) -o $@ -c $*.cpp -DVERSION="\"$(VERSION)\""

$(ALWAYS_COMP_OBJ):  $(COMPILE_ANY_CHANGE:=.cpp)  $(filter-out $(ALWAYS_COMP_OBJ),$(OBJECTS))
	$(CXX) $(CFLAGS) -o $@ -c  $(*F).cpp -DVERSION="\"$(VERSION)\""

#########
# Test
test: all
	@if test -d $(TESTDIR); \
        then \
	$(MAKE) -C $(TESTDIR) --no-print-directory $@; \
        fi

#########
# clean
clean : specific_clean
	-rm -f $(OBJDIR_OPT)/*.o $(OBJDIR_DEBUG)/*.o $(OBJDIR_PROFILE)/*.o *~ 
	@if test -d $(TESTDIR); \
        then \
	$(MAKE) -C $(TESTDIR) OPTFLAG="$(OPTFLAG)" --no-print-directory $@; \
        fi

.SUFFIXES : .cpp .c .o .X.o $(SUFFIXES)

#
# The newest version of astyle will remove parens in a statement
# header (the character following if/while/do).  The current
# version in Ubuntu does not.
#
# See http://astyle.sourceforge.net/astyle.html#_Padding_Options
#
style:
	(command -v astyle || echo "astyle not installed.")
	(command -v astyle && astyle --style=ansi --preserve-date --unpad-paren --indent-switches *.cpp *.h)

###############
# Dependencies
DFLAGS=-Y $(CFLAGS)

cleandepend:
	        makedepend -- $(DFLAGS) --

depend:
	touch $(MAKE_DEPENDS)
	makedepend -f$(MAKE_DEPENDS) -p$$\(OBJDIR$$\(VARIABLE_EXT\)\)/ -- $(DFLAGS) -- $(TOOLSRC) >/dev/null 2>&1


ifeq ($(wildcard $(MAKE_DEPENDS)),)
$(OBJECTS) : $(TOOLHDR)
else
include $(MAKE_DEPENDS)
endif
